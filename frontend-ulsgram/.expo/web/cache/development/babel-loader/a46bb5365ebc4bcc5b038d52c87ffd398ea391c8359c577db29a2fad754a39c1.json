{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport api from \"../../api/api\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    token = _useState6[0],\n    setToken = _useState6[1];\n  var handleLogin = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var response = yield api.post('/login', {\n          email: email,\n          password: password\n        });\n        var _token = response.data.access_token;\n        setToken(_token);\n        api.defaults.headers.common['Authorization'] = \"Bearer \" + _token;\n        Alert.alert('Login Exitoso', \"Token: \" + _token);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        Alert.alert('Error', ((_error$response = error.response) == null ? void 0 : (_error$response$data = _error$response.data) == null ? void 0 : _error$response$data.message) || 'Error en login');\n      }\n    });\n    return function handleLogin() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: {\n      padding: 20\n    },\n    children: [_jsx(Text, {\n      children: \"Login\"\n    }), _jsx(TextInput, {\n      placeholder: \"Correo\",\n      onChangeText: setEmail,\n      value: email\n    }), _jsx(TextInput, {\n      placeholder: \"Contrase\\xF1a\",\n      secureTextEntry: true,\n      onChangeText: setPassword,\n      value: password\n    }), _jsx(Button, {\n      title: \"Iniciar sesi\\xF3n\",\n      onPress: handleLogin\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","View","Text","Button","Alert","TextInput","api","jsx","_jsx","jsxs","_jsxs","LoginScreen","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","token","setToken","handleLogin","_ref","_asyncToGenerator","response","post","data","access_token","defaults","headers","common","alert","error","_error$response","_error$response$data","message","apply","arguments","style","padding","children","placeholder","onChangeText","value","secureTextEntry","title","onPress"],"sources":["C:/Users/Madeline/Documents/GitHub/ULSGRAMM/frontend-ulsgram/screens/Auth/LoginScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, Button, Alert, TextInput } from 'react-native';\nimport api from '../../api/api';\n\nexport default function LoginScreen() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [token, setToken] = useState(null);\n\n  const handleLogin = async () => {\n    try {\n      const response = await api.post('/login', { email, password });\n      const token = response.data.access_token;\n      setToken(token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`; // Aquí guardas el token para usar en otras peticiones\n      Alert.alert('Login Exitoso', `Token: ${token}`);\n    } catch (error) {\n      Alert.alert('Error', error.response?.data?.message || 'Error en login');\n    }\n  };\n\n  return (\n    <View style={{ padding: 20 }}>\n      <Text>Login</Text>\n      <TextInput placeholder=\"Correo\" onChangeText={setEmail} value={email} />\n      <TextInput\n        placeholder=\"Contraseña\"\n        secureTextEntry\n        onChangeText={setPassword}\n        value={password}\n      />\n      <Button title=\"Iniciar sesión\" onPress={handleLogin} />\n    </View>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,SAAA;AAExC,OAAOC,GAAG;AAAsB,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAEhC,eAAe,SAASC,WAAWA,CAAA,EAAG;EACpC,IAAAC,SAAA,GAA0BZ,QAAQ,CAAC,EAAE,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAAI,UAAA,GAAgCjB,QAAQ,CAAC,EAAE,CAAC;IAAAkB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAAG,UAAA,GAA0BrB,QAAQ,CAAC,IAAI,CAAC;IAAAsB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAjCE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtB,IAAMG,WAAW;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MAC9B,IAAI;QACF,IAAMC,QAAQ,SAAStB,GAAG,CAACuB,IAAI,CAAC,QAAQ,EAAE;UAAEd,KAAK,EAALA,KAAK;UAAEI,QAAQ,EAARA;QAAS,CAAC,CAAC;QAC9D,IAAMI,MAAK,GAAGK,QAAQ,CAACE,IAAI,CAACC,YAAY;QACxCP,QAAQ,CAACD,MAAK,CAAC;QACfjB,GAAG,CAAC0B,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,eAAaX,MAAO;QAChEnB,KAAK,CAAC+B,KAAK,CAAC,eAAe,cAAYZ,MAAO,CAAC;MACjD,CAAC,CAAC,OAAOa,KAAK,EAAE;QAAA,IAAAC,eAAA,EAAAC,oBAAA;QACdlC,KAAK,CAAC+B,KAAK,CAAC,OAAO,EAAE,EAAAE,eAAA,GAAAD,KAAK,CAACR,QAAQ,sBAAAU,oBAAA,GAAdD,eAAA,CAAgBP,IAAI,qBAApBQ,oBAAA,CAAsBC,OAAO,KAAI,gBAAgB,CAAC;MACzE;IACF,CAAC;IAAA,gBAVKd,WAAWA,CAAA;MAAA,OAAAC,IAAA,CAAAc,KAAA,OAAAC,SAAA;IAAA;EAAA,GAUhB;EAED,OACE/B,KAAA,CAACT,IAAI;IAACyC,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAAC,QAAA,GAC3BpC,IAAA,CAACN,IAAI;MAAA0C,QAAA,EAAC;IAAK,CAAM,CAAC,EAClBpC,IAAA,CAACH,SAAS;MAACwC,WAAW,EAAC,QAAQ;MAACC,YAAY,EAAE9B,QAAS;MAAC+B,KAAK,EAAEhC;IAAM,CAAE,CAAC,EACxEP,IAAA,CAACH,SAAS;MACRwC,WAAW,EAAC,eAAY;MACxBG,eAAe;MACfF,YAAY,EAAE1B,WAAY;MAC1B2B,KAAK,EAAE5B;IAAS,CACjB,CAAC,EACFX,IAAA,CAACL,MAAM;MAAC8C,KAAK,EAAC,mBAAgB;MAACC,OAAO,EAAEzB;IAAY,CAAE,CAAC;EAAA,CACnD,CAAC;AAEX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}